/*
 * WARNING: this is an autogenerated file and will be overwritten by
 * the extension interface script.
 */

#include "s3eExt.h"
#include "IwDebug.h"

#include "s3eNOpenFeint.h"

/**
 * Definitions for functions types passed to/from s3eExt interface
 */
typedef  s3eResult(*s3eNOpenFeintRegister_t)(s3eNOpenFeintCallback cbid, s3eCallback fn, void* userData);
typedef  s3eResult(*s3eNOpenFeintUnRegister_t)(s3eNOpenFeintCallback cbid, s3eCallback fn);
typedef const char*(*s3eNOpenFeintGetErrorString_t)();
typedef s3eNOpenFeintError(*s3eNOpenFeintGetError_t)();
typedef  s3eResult(*s3eNewMessageBox_t)(const char* title, const char* text);
typedef  s3eResult(*s3eNOFinitializeWithProductKey_t)(const char* productKey, const char* secret, const char* displayName, const s3eNOFArray* settings);
typedef  s3eResult(*s3eNOFlaunchDashboardWithHighscorePage_t)(const char* leaderboardId);
typedef  s3eResult(*s3eNOFlaunchDashboardWithAchievementsPage_t)();
typedef  s3eResult(*s3eNOFlaunchDashboardWithChallengesPage_t)();
typedef  s3eResult(*s3eNOFlaunchDashboardWithFindFriendsPage_t)();
typedef  s3eResult(*s3eNOFlaunchDashboardWithWhosPlayingPage_t)();
typedef  s3eResult(*s3eNOFlaunchDashboardWithListGlobalChatRoomsPage_t)();
typedef  s3eResult(*s3eNOFlaunchDashboardWithiPurchasePage_t)(const char* clientApplicationId);
typedef  s3eResult(*s3eNOFlaunchDashboardWithSwitchUserPage_t)();
typedef  s3eResult(*s3eNOFlaunchDashboardWithForumsPage_t)();
typedef  s3eResult(*s3eNOFlaunchDashboardWithInvitePage_t)();
typedef  s3eResult(*s3eNOFlaunchDashboardWithSpecificInvite_t)(const char* inviteIdentifier);
typedef  s3eResult(*s3eNOFlaunchDashboardWithSocialNotificationWithPrepopulatedText_t)(const char* prepopulatedText, const char * originialMessage, const char* imageName, const char* linkedUrl);
typedef  s3eResult(*s3eNOFshutdown_t)();
typedef  s3eResult(*s3eNOFlaunchDashboard_t)();
typedef  s3eResult(*s3eNOFdismissDashboard_t)();
typedef  s3eResult(*s3eNOFsetDashboardOrientation_t)(s3eNOFUIInterfaceOrientation orientation);
typedef     ushort(*s3eNOFhasUserApprovedFeint_t)();
typedef     ushort(*s3eNOFisOnline_t)();
typedef  s3eResult(*s3eNOFdisplayAndSendChallenge_t)(s3eNOFChallengeDefinition* challengeDefinition, const char* challengeDescription, const s3eNOFChallengeData* challengeData);
typedef  s3eResult(*s3eNOFdownloadAllChallengeDefinitions_t)();
typedef  s3eResult(*s3eNOFdownloadChallengeDefinitionWithId_t)(const char* challengeDefinitionId);
typedef  s3eResult(*s3eNOFchallengeCompleteWithResult_t)(s3eNOFChallengeResult challengeResult, const char* challengePeristentId);
typedef  s3eResult(*s3eNOFchallengeDisplayCompletionWithData_t)(s3eNOFChallengeData* challengeData, const char* reChallengeDescription, const char* challengePeristentId);
typedef  s3eResult(*s3eNOFsubmitHighScore_t)(const char* leaderBoadId, const char* score, const char* displayText, const char* customData);
typedef  s3eResult(*s3eNOFupdateAcheivementProgressionComplete_t)(const char* achievementId, double updatePercentComplete, bool showUpdateNotification);
typedef  s3eResult(*s3eNOFachievements_t)(s3eNOFArray* achArray);
typedef  s3eResult(*s3eNOFachievement_t)(s3eNOFAchievement* achievement, const char* achievementId);
typedef  s3eResult(*s3eNOFachievementUnlock_t)(const char* achievementId);
typedef  s3eResult(*s3eNOFachievementUnlockAndDefer_t)(const char* achievementId);
typedef  s3eResult(*s3eNOFsubmitDeferredAchievements_t)();
typedef  s3eResult(*s3eNOFapplicationDidRegisterForRemoteNotificationsWithDeviceToke_t)(const char* deviceToken);

/**
 * struct that gets filled in by s3eNOpenFeintRegister
 */
typedef struct s3eNOpenFeintFuncs
{
    s3eNOpenFeintRegister_t m_s3eNOpenFeintRegister;
    s3eNOpenFeintUnRegister_t m_s3eNOpenFeintUnRegister;
    s3eNOpenFeintGetErrorString_t m_s3eNOpenFeintGetErrorString;
    s3eNOpenFeintGetError_t m_s3eNOpenFeintGetError;
    s3eNewMessageBox_t m_s3eNewMessageBox;
    s3eNOFinitializeWithProductKey_t m_s3eNOFinitializeWithProductKey;
    s3eNOFlaunchDashboardWithHighscorePage_t m_s3eNOFlaunchDashboardWithHighscorePage;
    s3eNOFlaunchDashboardWithAchievementsPage_t m_s3eNOFlaunchDashboardWithAchievementsPage;
    s3eNOFlaunchDashboardWithChallengesPage_t m_s3eNOFlaunchDashboardWithChallengesPage;
    s3eNOFlaunchDashboardWithFindFriendsPage_t m_s3eNOFlaunchDashboardWithFindFriendsPage;
    s3eNOFlaunchDashboardWithWhosPlayingPage_t m_s3eNOFlaunchDashboardWithWhosPlayingPage;
    s3eNOFlaunchDashboardWithListGlobalChatRoomsPage_t m_s3eNOFlaunchDashboardWithListGlobalChatRoomsPage;
    s3eNOFlaunchDashboardWithiPurchasePage_t m_s3eNOFlaunchDashboardWithiPurchasePage;
    s3eNOFlaunchDashboardWithSwitchUserPage_t m_s3eNOFlaunchDashboardWithSwitchUserPage;
    s3eNOFlaunchDashboardWithForumsPage_t m_s3eNOFlaunchDashboardWithForumsPage;
    s3eNOFlaunchDashboardWithInvitePage_t m_s3eNOFlaunchDashboardWithInvitePage;
    s3eNOFlaunchDashboardWithSpecificInvite_t m_s3eNOFlaunchDashboardWithSpecificInvite;
    s3eNOFlaunchDashboardWithSocialNotificationWithPrepopulatedText_t m_s3eNOFlaunchDashboardWithSocialNotificationWithPrepopulatedText;
    s3eNOFshutdown_t m_s3eNOFshutdown;
    s3eNOFlaunchDashboard_t m_s3eNOFlaunchDashboard;
    s3eNOFdismissDashboard_t m_s3eNOFdismissDashboard;
    s3eNOFsetDashboardOrientation_t m_s3eNOFsetDashboardOrientation;
    s3eNOFhasUserApprovedFeint_t m_s3eNOFhasUserApprovedFeint;
    s3eNOFisOnline_t m_s3eNOFisOnline;
    s3eNOFdisplayAndSendChallenge_t m_s3eNOFdisplayAndSendChallenge;
    s3eNOFdownloadAllChallengeDefinitions_t m_s3eNOFdownloadAllChallengeDefinitions;
    s3eNOFdownloadChallengeDefinitionWithId_t m_s3eNOFdownloadChallengeDefinitionWithId;
    s3eNOFchallengeCompleteWithResult_t m_s3eNOFchallengeCompleteWithResult;
    s3eNOFchallengeDisplayCompletionWithData_t m_s3eNOFchallengeDisplayCompletionWithData;
    s3eNOFsubmitHighScore_t m_s3eNOFsubmitHighScore;
    s3eNOFupdateAcheivementProgressionComplete_t m_s3eNOFupdateAcheivementProgressionComplete;
    s3eNOFachievements_t m_s3eNOFachievements;
    s3eNOFachievement_t m_s3eNOFachievement;
    s3eNOFachievementUnlock_t m_s3eNOFachievementUnlock;
    s3eNOFachievementUnlockAndDefer_t m_s3eNOFachievementUnlockAndDefer;
    s3eNOFsubmitDeferredAchievements_t m_s3eNOFsubmitDeferredAchievements;
    s3eNOFapplicationDidRegisterForRemoteNotificationsWithDeviceToke_t m_s3eNOFapplicationDidRegisterForRemoteNotificationsWithDeviceToke;
} s3eNOpenFeintFuncs;

static s3eNOpenFeintFuncs g_Ext;
static bool g_GotExt = false;
static bool g_TriedExt = false;
static bool g_TriedNoMsgExt = false;

static bool _extLoad()
{
    if (!g_GotExt && !g_TriedExt)
    {
        s3eResult res = s3eExtGetHash(0x74c89566, &g_Ext, sizeof(g_Ext));
        if (res == S3E_RESULT_SUCCESS)
            g_GotExt = true;
        else
            s3eDebugAssertShow(S3E_MESSAGE_CONTINUE_STOP_IGNORE, "error loading extension: s3eNOpenFeint");
        g_TriedExt = true;
        g_TriedNoMsgExt = true;
    }

    return g_GotExt;
}

static bool _extLoadNoMsg()
{
    if (!g_GotExt && !g_TriedNoMsgExt)
    {
        s3eResult res = s3eExtGetHash(0x74c89566, &g_Ext, sizeof(g_Ext));
        if (res == S3E_RESULT_SUCCESS)
            g_GotExt = true;
        g_TriedNoMsgExt = true;
        if (g_TriedExt)
            g_TriedExt = true;
    }

    return g_GotExt;
}

s3eBool s3eNOpenFeintAvailable()
{
    _extLoadNoMsg();
    return g_GotExt ? S3E_TRUE : S3E_FALSE;
}

s3eResult s3eNOpenFeintRegister(s3eNOpenFeintCallback cbid, s3eCallback fn, void* userData)
{
    IwTrace(NOPENFEINT_VERBOSE, ("calling s3eNOpenFeint[0] func: s3eNOpenFeintRegister"));

    if (!_extLoad())
        return S3E_RESULT_ERROR;

    return g_Ext.m_s3eNOpenFeintRegister(cbid, fn, userData);
}

s3eResult s3eNOpenFeintUnRegister(s3eNOpenFeintCallback cbid, s3eCallback fn)
{
    IwTrace(NOPENFEINT_VERBOSE, ("calling s3eNOpenFeint[1] func: s3eNOpenFeintUnRegister"));

    if (!_extLoad())
        return S3E_RESULT_ERROR;

    return g_Ext.m_s3eNOpenFeintUnRegister(cbid, fn);
}

const char* s3eNOpenFeintGetErrorString()
{
    IwTrace(NOPENFEINT_VERBOSE, ("calling s3eNOpenFeint[2] func: s3eNOpenFeintGetErrorString"));

    if (!_extLoad())
        return NULL;

    return g_Ext.m_s3eNOpenFeintGetErrorString();
}

s3eNOpenFeintError s3eNOpenFeintGetError()
{
    IwTrace(NOPENFEINT_VERBOSE, ("calling s3eNOpenFeint[3] func: s3eNOpenFeintGetError"));

    if (!_extLoad())
        return (s3eNOpenFeintError)0;

    return g_Ext.m_s3eNOpenFeintGetError();
}

s3eResult s3eNewMessageBox(const char* title, const char* text)
{
    IwTrace(NOPENFEINT_VERBOSE, ("calling s3eNOpenFeint[4] func: s3eNewMessageBox"));

    if (!_extLoad())
        return S3E_RESULT_ERROR;

    return g_Ext.m_s3eNewMessageBox(title, text);
}

s3eResult s3eNOFinitializeWithProductKey(const char* productKey, const char* secret, const char* displayName, const s3eNOFArray* settings)
{
    IwTrace(NOPENFEINT_VERBOSE, ("calling s3eNOpenFeint[5] func: s3eNOFinitializeWithProductKey"));

    if (!_extLoad())
        return S3E_RESULT_SUCCESS;

    return g_Ext.m_s3eNOFinitializeWithProductKey(productKey, secret, displayName, settings);
}

s3eResult s3eNOFlaunchDashboardWithHighscorePage(const char* leaderboardId)
{
    IwTrace(NOPENFEINT_VERBOSE, ("calling s3eNOpenFeint[6] func: s3eNOFlaunchDashboardWithHighscorePage"));

    if (!_extLoad())
        return S3E_RESULT_SUCCESS;

    return g_Ext.m_s3eNOFlaunchDashboardWithHighscorePage(leaderboardId);
}

s3eResult s3eNOFlaunchDashboardWithAchievementsPage()
{
    IwTrace(NOPENFEINT_VERBOSE, ("calling s3eNOpenFeint[7] func: s3eNOFlaunchDashboardWithAchievementsPage"));

    if (!_extLoad())
        return S3E_RESULT_SUCCESS;

    return g_Ext.m_s3eNOFlaunchDashboardWithAchievementsPage();
}

s3eResult s3eNOFlaunchDashboardWithChallengesPage()
{
    IwTrace(NOPENFEINT_VERBOSE, ("calling s3eNOpenFeint[8] func: s3eNOFlaunchDashboardWithChallengesPage"));

    if (!_extLoad())
        return S3E_RESULT_SUCCESS;

    return g_Ext.m_s3eNOFlaunchDashboardWithChallengesPage();
}

s3eResult s3eNOFlaunchDashboardWithFindFriendsPage()
{
    IwTrace(NOPENFEINT_VERBOSE, ("calling s3eNOpenFeint[9] func: s3eNOFlaunchDashboardWithFindFriendsPage"));

    if (!_extLoad())
        return S3E_RESULT_SUCCESS;

    return g_Ext.m_s3eNOFlaunchDashboardWithFindFriendsPage();
}

s3eResult s3eNOFlaunchDashboardWithWhosPlayingPage()
{
    IwTrace(NOPENFEINT_VERBOSE, ("calling s3eNOpenFeint[10] func: s3eNOFlaunchDashboardWithWhosPlayingPage"));

    if (!_extLoad())
        return S3E_RESULT_SUCCESS;

    return g_Ext.m_s3eNOFlaunchDashboardWithWhosPlayingPage();
}

s3eResult s3eNOFlaunchDashboardWithListGlobalChatRoomsPage()
{
    IwTrace(NOPENFEINT_VERBOSE, ("calling s3eNOpenFeint[11] func: s3eNOFlaunchDashboardWithListGlobalChatRoomsPage"));

    if (!_extLoad())
        return S3E_RESULT_SUCCESS;

    return g_Ext.m_s3eNOFlaunchDashboardWithListGlobalChatRoomsPage();
}

s3eResult s3eNOFlaunchDashboardWithiPurchasePage(const char* clientApplicationId)
{
    IwTrace(NOPENFEINT_VERBOSE, ("calling s3eNOpenFeint[12] func: s3eNOFlaunchDashboardWithiPurchasePage"));

    if (!_extLoad())
        return S3E_RESULT_SUCCESS;

    return g_Ext.m_s3eNOFlaunchDashboardWithiPurchasePage(clientApplicationId);
}

s3eResult s3eNOFlaunchDashboardWithSwitchUserPage()
{
    IwTrace(NOPENFEINT_VERBOSE, ("calling s3eNOpenFeint[13] func: s3eNOFlaunchDashboardWithSwitchUserPage"));

    if (!_extLoad())
        return S3E_RESULT_SUCCESS;

    return g_Ext.m_s3eNOFlaunchDashboardWithSwitchUserPage();
}

s3eResult s3eNOFlaunchDashboardWithForumsPage()
{
    IwTrace(NOPENFEINT_VERBOSE, ("calling s3eNOpenFeint[14] func: s3eNOFlaunchDashboardWithForumsPage"));

    if (!_extLoad())
        return S3E_RESULT_SUCCESS;

    return g_Ext.m_s3eNOFlaunchDashboardWithForumsPage();
}

s3eResult s3eNOFlaunchDashboardWithInvitePage()
{
    IwTrace(NOPENFEINT_VERBOSE, ("calling s3eNOpenFeint[15] func: s3eNOFlaunchDashboardWithInvitePage"));

    if (!_extLoad())
        return S3E_RESULT_SUCCESS;

    return g_Ext.m_s3eNOFlaunchDashboardWithInvitePage();
}

s3eResult s3eNOFlaunchDashboardWithSpecificInvite(const char* inviteIdentifier)
{
    IwTrace(NOPENFEINT_VERBOSE, ("calling s3eNOpenFeint[16] func: s3eNOFlaunchDashboardWithSpecificInvite"));

    if (!_extLoad())
        return S3E_RESULT_SUCCESS;

    return g_Ext.m_s3eNOFlaunchDashboardWithSpecificInvite(inviteIdentifier);
}

s3eResult s3eNOFlaunchDashboardWithSocialNotificationWithPrepopulatedText(const char* prepopulatedText, const char * originialMessage, const char* imageName, const char* linkedUrl)
{
    IwTrace(NOPENFEINT_VERBOSE, ("calling s3eNOpenFeint[17] func: s3eNOFlaunchDashboardWithSocialNotificationWithPrepopulatedText"));

    if (!_extLoad())
        return S3E_RESULT_SUCCESS;

    return g_Ext.m_s3eNOFlaunchDashboardWithSocialNotificationWithPrepopulatedText(prepopulatedText, originialMessage, imageName, linkedUrl);
}

s3eResult s3eNOFshutdown()
{
    IwTrace(NOPENFEINT_VERBOSE, ("calling s3eNOpenFeint[18] func: s3eNOFshutdown"));

    if (!_extLoad())
        return S3E_RESULT_SUCCESS;

    return g_Ext.m_s3eNOFshutdown();
}

s3eResult s3eNOFlaunchDashboard()
{
    IwTrace(NOPENFEINT_VERBOSE, ("calling s3eNOpenFeint[19] func: s3eNOFlaunchDashboard"));

    if (!_extLoad())
        return S3E_RESULT_SUCCESS;

    return g_Ext.m_s3eNOFlaunchDashboard();
}

s3eResult s3eNOFdismissDashboard()
{
    IwTrace(NOPENFEINT_VERBOSE, ("calling s3eNOpenFeint[20] func: s3eNOFdismissDashboard"));

    if (!_extLoad())
        return S3E_RESULT_SUCCESS;

    return g_Ext.m_s3eNOFdismissDashboard();
}

s3eResult s3eNOFsetDashboardOrientation(s3eNOFUIInterfaceOrientation orientation)
{
    IwTrace(NOPENFEINT_VERBOSE, ("calling s3eNOpenFeint[21] func: s3eNOFsetDashboardOrientation"));

    if (!_extLoad())
        return S3E_RESULT_SUCCESS;

    return g_Ext.m_s3eNOFsetDashboardOrientation(orientation);
}

ushort s3eNOFhasUserApprovedFeint()
{
    IwTrace(NOPENFEINT_VERBOSE, ("calling s3eNOpenFeint[22] func: s3eNOFhasUserApprovedFeint"));

    if (!_extLoad())
        return S3E_RESULT_SUCCESS;

    return g_Ext.m_s3eNOFhasUserApprovedFeint();
}

ushort s3eNOFisOnline()
{
    IwTrace(NOPENFEINT_VERBOSE, ("calling s3eNOpenFeint[23] func: s3eNOFisOnline"));

    if (!_extLoad())
        return S3E_RESULT_SUCCESS;

    return g_Ext.m_s3eNOFisOnline();
}

s3eResult s3eNOFdisplayAndSendChallenge(s3eNOFChallengeDefinition* challengeDefinition, const char* challengeDescription, const s3eNOFChallengeData* challengeData)
{
    IwTrace(NOPENFEINT_VERBOSE, ("calling s3eNOpenFeint[24] func: s3eNOFdisplayAndSendChallenge"));

    if (!_extLoad())
        return S3E_RESULT_SUCCESS;

    return g_Ext.m_s3eNOFdisplayAndSendChallenge(challengeDefinition, challengeDescription, challengeData);
}

s3eResult s3eNOFdownloadAllChallengeDefinitions()
{
    IwTrace(NOPENFEINT_VERBOSE, ("calling s3eNOpenFeint[25] func: s3eNOFdownloadAllChallengeDefinitions"));

    if (!_extLoad())
        return S3E_RESULT_SUCCESS;

    return g_Ext.m_s3eNOFdownloadAllChallengeDefinitions();
}

s3eResult s3eNOFdownloadChallengeDefinitionWithId(const char* challengeDefinitionId)
{
    IwTrace(NOPENFEINT_VERBOSE, ("calling s3eNOpenFeint[26] func: s3eNOFdownloadChallengeDefinitionWithId"));

    if (!_extLoad())
        return S3E_RESULT_SUCCESS;

    return g_Ext.m_s3eNOFdownloadChallengeDefinitionWithId(challengeDefinitionId);
}

s3eResult s3eNOFchallengeCompleteWithResult(s3eNOFChallengeResult challengeResult, const char* challengePeristentId)
{
    IwTrace(NOPENFEINT_VERBOSE, ("calling s3eNOpenFeint[27] func: s3eNOFchallengeCompleteWithResult"));

    if (!_extLoad())
        return S3E_RESULT_SUCCESS;

    return g_Ext.m_s3eNOFchallengeCompleteWithResult(challengeResult, challengePeristentId);
}

s3eResult s3eNOFchallengeDisplayCompletionWithData(s3eNOFChallengeData* challengeData, const char* reChallengeDescription, const char* challengePeristentId)
{
    IwTrace(NOPENFEINT_VERBOSE, ("calling s3eNOpenFeint[28] func: s3eNOFchallengeDisplayCompletionWithData"));

    if (!_extLoad())
        return S3E_RESULT_SUCCESS;

    return g_Ext.m_s3eNOFchallengeDisplayCompletionWithData(challengeData, reChallengeDescription, challengePeristentId);
}

s3eResult s3eNOFsubmitHighScore(const char* leaderBoadId, const char* score, const char* displayText, const char* customData)
{
    IwTrace(NOPENFEINT_VERBOSE, ("calling s3eNOpenFeint[29] func: s3eNOFsubmitHighScore"));

    if (!_extLoad())
        return S3E_RESULT_SUCCESS;

    return g_Ext.m_s3eNOFsubmitHighScore(leaderBoadId, score, displayText, customData);
}

s3eResult s3eNOFupdateAcheivementProgressionComplete(const char* achievementId, double updatePercentComplete, bool showUpdateNotification)
{
    IwTrace(NOPENFEINT_VERBOSE, ("calling s3eNOpenFeint[30] func: s3eNOFupdateAcheivementProgressionComplete"));

    if (!_extLoad())
        return S3E_RESULT_SUCCESS;

    return g_Ext.m_s3eNOFupdateAcheivementProgressionComplete(achievementId, updatePercentComplete, showUpdateNotification);
}

s3eResult s3eNOFachievements(s3eNOFArray* achArray)
{
    IwTrace(NOPENFEINT_VERBOSE, ("calling s3eNOpenFeint[31] func: s3eNOFachievements"));

    if (!_extLoad())
        return S3E_RESULT_SUCCESS;

    return g_Ext.m_s3eNOFachievements(achArray);
}

s3eResult s3eNOFachievement(s3eNOFAchievement* achievement, const char* achievementId)
{
    IwTrace(NOPENFEINT_VERBOSE, ("calling s3eNOpenFeint[32] func: s3eNOFachievement"));

    if (!_extLoad())
        return S3E_RESULT_SUCCESS;

    return g_Ext.m_s3eNOFachievement(achievement, achievementId);
}

s3eResult s3eNOFachievementUnlock(const char* achievementId)
{
    IwTrace(NOPENFEINT_VERBOSE, ("calling s3eNOpenFeint[33] func: s3eNOFachievementUnlock"));

    if (!_extLoad())
        return S3E_RESULT_SUCCESS;

    return g_Ext.m_s3eNOFachievementUnlock(achievementId);
}

s3eResult s3eNOFachievementUnlockAndDefer(const char* achievementId)
{
    IwTrace(NOPENFEINT_VERBOSE, ("calling s3eNOpenFeint[34] func: s3eNOFachievementUnlockAndDefer"));

    if (!_extLoad())
        return S3E_RESULT_SUCCESS;

    return g_Ext.m_s3eNOFachievementUnlockAndDefer(achievementId);
}

s3eResult s3eNOFsubmitDeferredAchievements()
{
    IwTrace(NOPENFEINT_VERBOSE, ("calling s3eNOpenFeint[35] func: s3eNOFsubmitDeferredAchievements"));

    if (!_extLoad())
        return S3E_RESULT_SUCCESS;

    return g_Ext.m_s3eNOFsubmitDeferredAchievements();
}

s3eResult s3eNOFapplicationDidRegisterForRemoteNotificationsWithDeviceToke(const char* deviceToken)
{
    IwTrace(NOPENFEINT_VERBOSE, ("calling s3eNOpenFeint[36] func: s3eNOFapplicationDidRegisterForRemoteNotificationsWithDeviceToke"));

    if (!_extLoad())
        return S3E_RESULT_SUCCESS;

    return g_Ext.m_s3eNOFapplicationDidRegisterForRemoteNotificationsWithDeviceToke(deviceToken);
}
